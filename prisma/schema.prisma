// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 사용자
model User {
  id        Int      @id @default(autoincrement())
  loginId   String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  phone     String   @db.VarChar(255)
  type      UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  deptId         Int?
  department     Department? @relation(fields: [deptId], references: [id])
  studentProcess Process?    @relation("student")

  headReviewProcesses Process[]  @relation("headReviewer")
  reviewers           Reviewer[]
  reviews             Review[]

  @@map("user")
}

enum UserType {
  STUDENT
  PROFESSOR
  ADMIN
}

/// 학과
model Department {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)

  users User[]

  @@map("department")
}

/// 논문 과정
model Process {
  id        Int      @id @default(autoincrement())
  isLock    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  studentId      Int?   @unique
  student        User?  @relation("student", fields: [studentId], references: [id])
  headReviewerId Int?
  headReviewer   User?  @relation("headReviewer", fields: [headReviewerId], references: [id])
  phaseId        Int?
  phase          Phase? @relation(fields: [phaseId], references: [id])

  reviewers   Reviewer[]
  thesisInfos ThesisInfo[]

  @@map("process")
}

/// 시스템 단계
model Phase {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  start     DateTime?
  end       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  processes Process[]

  @@map("phase")
}

/// 논문 정보
model ThesisInfo {
  id       Int     @id @default(autoincrement())
  title    String? @db.VarChar(255)
  abstract String? @db.Text
  stage    Stage
  summary  Summary

  processId Int?
  process   Process? @relation(fields: [processId], references: [id])

  thesisFiles ThesisFile[]
  reviews     Review[]

  @@map("thesis_info")
}

enum Stage {
  PRELIMINARY
  MAIN
}

enum Summary {
  PASS
  FAIL
  PENDING
  UNEXAMINED
}

/// 심사 위원
model Reviewer {
  id Int @id @default(autoincrement())

  reviewerId Int?
  reviewer   User?    @relation(fields: [reviewerId], references: [id])
  processId  Int?
  process    Process? @relation(fields: [processId], references: [id])

  @@map("reviewer")
}

/// 논문 심사
model Review {
  id        Int      @id @default(autoincrement())
  status    Status?
  comment   String?  @db.Text
  isFinal   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  reviewerId   Int
  reviewer     User       @relation(fields: [reviewerId], references: [id])
  thesisInfoId Int
  thesisInfo   ThesisInfo @relation(fields: [thesisInfoId], references: [id])
  fileId       String?    @unique
  file         File?      @relation(fields: [fileId], references: [uuid])

  @@map("review")
}

enum Status {
  UNEXAMINED
  PASS
  FAIL
  PENDING
}

/// 파일
model File {
  uuid      String   @id @default(uuid())
  name      String?  @db.VarChar(255)
  mimeType  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  review     Review?
  thesisFile ThesisFile?

  @@map("file")
}

/// 논문 파일
model ThesisFile {
  id        Int            @id @default(autoincrement())
  type      ThesisFileType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt

  thesisInfoId Int?
  ThesisInfo   ThesisInfo? @relation(fields: [thesisInfoId], references: [id])
  fileId       String?     @unique
  file         File?       @relation(fields: [fileId], references: [uuid])

  @@map("thesis_file")
}

enum ThesisFileType {
  PRESENTATION
  THESIS
}
