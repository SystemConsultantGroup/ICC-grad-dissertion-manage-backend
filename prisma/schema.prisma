generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 사용자
model User {
  id                  Int            @id @default(autoincrement())
  loginId             String         @unique @db.VarChar(255)
  password            String         @db.VarChar(255)
  name                String         @db.VarChar(255)
  email               String?        @unique @db.VarChar(255)
  phone               String?        @db.VarChar(255)
  type                UserType
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  deletedAt           DateTime?
  deptId              Int?
  signId              String?        @unique
  headReviewProcesses Process[]      @relation("headReviewer")
  studentProcess      Process?       @relation("student")
  reviews             Review[]
  reviewers           Reviewer[]
  department          Department?    @relation(fields: [deptId], references: [id], onDelete: SetNull)
  signFile            File?          @relation(fields: [signId], references: [uuid])
  Achievements        Achievements[]

  @@index([deptId], map: "user_deptId_fkey")
  @@map("user")
}

/// 학과
model Department {
  id               Int     @id @default(autoincrement())
  name             String  @unique @db.VarChar(255)
  modificationFlag Boolean @default(true)
  users            User[]

  @@map("department")
}

/// 논문 과정
model Process {
  id             Int          @id @default(autoincrement())
  isLock         Boolean? // TODO : 추후 삭제
  currentPhase   Stage
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  studentId      Int?         @unique
  headReviewerId Int?
  phaseId        Int?
  headReviewer   User?        @relation("headReviewer", fields: [headReviewerId], references: [id], onDelete: SetNull)
  phase          Phase?       @relation(fields: [phaseId], references: [id])
  student        User?        @relation("student", fields: [studentId], references: [id], onDelete: Cascade)
  reviewers      Reviewer[]
  thesisInfos    ThesisInfo[]

  @@index([headReviewerId], map: "process_headReviewerId_fkey")
  @@index([phaseId], map: "process_phaseId_fkey")
  @@map("process")
}

/// 시스템 단계
model Phase {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(255)
  start     DateTime?
  end       DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  processes Process[]

  @@map("phase")
}

/// 논문 정보
model ThesisInfo {
  id          Int          @id @default(autoincrement())
  title       String?      @db.VarChar(255)
  abstract    String?      @db.Text
  stage       Stage
  summary     Summary
  processId   Int?
  reviews     Review[]
  thesisFiles ThesisFile[]
  process     Process?     @relation(fields: [processId], references: [id], onDelete: Cascade)

  @@index([processId], map: "thesis_info_processId_fkey")
  @@map("thesis_info")
}

/// 심사 위원
model Reviewer {
  id         Int      @id @default(autoincrement())
  reviewerId Int?
  processId  Int?
  role       Role
  process    Process? @relation(fields: [processId], references: [id], onDelete: Cascade)
  reviewer   User?    @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@index([processId], map: "reviewer_processId_fkey")
  @@index([reviewerId], map: "reviewer_reviewerId_fkey")
  @@map("reviewer")
}

/// 논문 심사
model Review {
  id                 Int         @id @default(autoincrement())
  contentStatus      Status?
  presentationStatus Status?
  comment            String?     @db.Text
  isFinal            Boolean
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @default(now()) @updatedAt
  reviewerId         Int?
  thesisInfoId       Int?
  fileId             String?     @unique
  file               File?       @relation(fields: [fileId], references: [uuid])
  reviewer           User?       @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  thesisInfo         ThesisInfo? @relation(fields: [thesisInfoId], references: [id], onDelete: Cascade)

  @@index([reviewerId], map: "review_reviewerId_fkey")
  @@index([thesisInfoId], map: "review_thesisInfoId_fkey")
  @@map("review")
}

/// 파일
model File {
  uuid       String      @id @default(uuid())
  name       String?     @db.VarChar(255)
  mimeType   String?     @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  review     Review?
  thesisFile ThesisFile?
  professor  User?

  @@map("file")
}

/// 논문 파일
model ThesisFile {
  id           Int            @id @default(autoincrement())
  type         ThesisFileType
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  thesisInfoId Int?
  fileId       String?        @unique
  file         File?          @relation(fields: [fileId], references: [uuid])
  ThesisInfo   ThesisInfo?    @relation(fields: [thesisInfoId], references: [id], onDelete: Cascade)

  @@index([thesisInfoId], map: "thesis_file_thesisInfoId_fkey")
  @@map("thesis_file")
}

model Achievements {
  id              Int         @id @default(autoincrement())
  performance     Performance
  journalName     String      @db.VarChar(100)
  paperTitle      String      @db.VarChar(100)
  ISSN            String?     @db.VarChar(15)
  publicationDate DateTime    @db.Date
  authorType      AuthorType
  authorNumbers   Int
  userId          Int?
  User            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "achievements_userId_fkey")
  @@map("achievements")
}

enum UserType {
  STUDENT
  PROFESSOR
  ADMIN
}

enum Stage {
  PRELIMINARY
  MAIN
  REVISION
}

enum Summary {
  PASS
  FAIL
  PENDING
  UNEXAMINED
}

enum Status {
  UNEXAMINED
  PASS
  FAIL
  PENDING
}

enum ThesisFileType {
  PRESENTATION
  THESIS
  REVISION_REPORT
}

enum Role {
  ADVISOR
  COMMITTEE_MEMBER
  COMMITTEE_CHAIR
}

enum Performance {
  SCI
  SCOPUS
  SCIE
  INTERNATIONAL_B
  DOMESTIC_A
  DOMESTIC_B
  ICOP
  ICP
  DCOP
  DCP
  IPR
  IPA
  DPR
  DPA
}

enum AuthorType {
  FIRST_AUTHOR
  CO_FIRST_AUTHOR
  CORRESPONDING_AUTHOR
  FIRST_CORRESPONDING_AUTHOR
  CO_AUTHOR
}
